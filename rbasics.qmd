# R Basics

```{r, echo=FALSE}
library(rvest)

pkgs <- read_html("https://cran.r-project.org/web/packages/available_packages_by_name.html")
mylines <- pkgs %>% 
    html_nodes("tr") %>%
    xml2::xml_text()

nb_pkgs <- length(which(sapply(mylines, nchar)>5))
```

R is often described and introduced as in the following

> "R is a programming language for statistical computing and graphics supported by the R Core Team and the R Foundation for Statistical Computing. Created by statisticians Ross Ihaka and Robert Gentleman, R is used among data miners, bioinformaticians and statisticians for data analysis and developing statistical software. Users have created packages to augment the functions of the R language."
>
> `r tufte::quote_footer('--- Wikipedia')`

But today, R is much more than just for statistical analysis. Thousands of packages have been added over the last decades by its very active, supportive and nerdy community. `r paste0("Currently, there are ", nb_pkgs, " packages available on CRAN (last checked: ", Sys.Date(), ")")` excluding packages that are only availably via other sources such as Github. Some packages have a more general purpose and can be applied widely, other packages are for very specific and distinct tasks. Today, R can be used for any task, starting with web scraping to data wrangling, literate programming, webapps, modelling, visualization and more.

## Overview and Terms

There are some terms that you will read or hear many times when programming (in R). I've listed some of the most important terms, so you can easily distinguish them and look them up.

-   [R Basics]
-   ["Base R"]
-   [Functions]
-   [Packages]
-   [Vignette]
-   quarto
-   rmarkdown
-   RStudio
-   CRAN
-   git
-   github

### "Base R"

When you read or hear about "base R", people mean a way of coding that only uses functions that are coming with the pure R installation. This means that no extra package needs to be installed to run some code. The opposite to coding in base R would be to make use of many packages that need to be downloaded and installed. Depending on what you want to achieve, the former or the latter or a compromise between them are best suited. If you want to write a package, it's generally a good practice to write as much base R code as possible to reduce the number of packages that your package depends on. On the contrary, e.g. if you want to write readable scripts for specific data analysis, using packages for different tasks is very helpful. Me for example, I really enjoy coding using the 'tidyverse' packages.

### Functions

Functions are an essential part of programming, because they apply some processing to your data or objects. But they also help you to keep your code readable, organised and to avoid repitions. There are functions to simply paste two strings together to a single string, functions to generate a plot or even functions to train a complex model based on some input data. Functions can be written or defined by yourself or they are part of a package that you want to use.

### Packages

A package is a collection of functions that are relevant to achieve a specific task. For example, the `raster` package contains many useful functions to handle spatial raster data like reading, processing and saving. Therefore, a package can be seen as a toolboc that contains tools for specific tasks. Some packages contain a single function, others contain a single dataset. Yes, packages can also contain datasets. In order to use packages, they need to be, downloaded and installed using the function

```{r, eval = FALSE}
install.packages("<package name>")
```

**AND** loaded using

```{r, eval = FALSE}
library("<package name>")
```

It is also possible to only load a subset of functions from a package using argument `exclude` or `include.only`

```{r, eval = FALSE}
library("<package name>", include.only = "function name")
```

or the `import` package.

### Vignette

A vignette is a guide or a introduction to a package in form of a website. It showcases one or more start to end examples of how the package can be used to achieve a specific task. It also shows a list of all functions of that package. Because how should you know about a function if you don't know its name or that it exists. It also documents changes that where made between different package versions. Many existing packages have a vignette and its good practice to provide a vignette.

[![Vignette of the \`dplyr\` package as example](images/example_vignette_dplyr.png)](https://dplyr.tidyverse.org/){fig-alt="A screenshot showing the top of the dplyr package vignette website."}

## Data types

text.

## Further Resources

In the following, some important resources are provided for different purposes such as getting started with programming in R, doing more sophisticated stuff, related topics to best-practices in programming etc.

### Online Books

-   Learning fundamental programming in R for data science with the `tidyverse` meta-package:<br>[R for Data Science \| by Hadley Wickham and Garret Grolemund](https://r4ds.had.co.nz/index.html)
-   Introduction into R:<br>[ModernDive \| by Chester Ismay and Albert Y. Kim](https://moderndive.com/index.html)
-   Introduction into R:<br>[R in Action \| by Robert I. Kabacoff](https://livebook.manning.com/book/r-in-action-third-edition/r-in-action/4) (only partially available for free)
-   Advanced R programming:<br>[Advanced R \| by Hadley Wickham](https://adv-r.hadley.nz/index.html)
-   In-depth best practices for efficient R programming:<br>[Efficient R programming \| by Colin Gillespie and Robin Lovelace](https://csgillespie.github.io/efficientR/)
-   Wrangling, analyzing, and vizualising geo data:<br>[Geocomputation with R \| by Robin Lovelace, Jakub Nowosad and Jannes Muenchow](https://geocompr.robinlovelace.net/index.html)
-   Handling spatial data in R:<br>[Spatial Data Science \| by Edzer Pebesma and Roger Bivand](https://r-spatial.org/book/)
-   All you need to know about R with git and github:<br>[Happy Git and GitHub for the useR \| by Jenny Bryan](https://happygitwithr.com/index.html)
-   Basics of machine learning in R using the `tidymodels` meta-package:<br>[Tidy Modeling with R \| by Max Kuhn and Julia Silge](https://www.tmwr.org/)
-   Introduction and in-depth knowledge for writing R packages:<br>[R Packages \| by Hadley Wickham and Jenny Bryan](https://r-pkgs.org/)
-   Basics of web scraping with R:<br>[Web Scraping with R \| by Steve Pittard](https://steviep42.github.io/webscraping/book/)
-   Introduction into R and mixed topics:<br>[STAT 545 \| by Jenny Bryan](https://stat545.com/)
-   Collection of R resources:<br>[Big Book of R \| by Oscar Baruffa](https://www.bigbookofr.com/index.html)

### Hands On Exercises --- Learning R through Challenges and small Projects

For speeding up the learning process it is more important to practise rather than reading books. There are many great places in the internet where you can find smaller and bigger data science challenges and projects. I really recommend to visit those places and just learn by directly solving tasks. Most important ones are:

-   [R Bootcamp](https://r-bootcamp.netlify.app/chapter1)

-   [DatascienceBox](https://datasciencebox.org/02-hello-world.html)

-   [Kaggle](https://www.kaggle.com/competitions)

-   [TidyTuesday](https://github.com/rfordatascience/tidytuesday) and [#tidytuesday](https://twitter.com/hashtag/TidyTuesday?src=hashtag_click)

-   [AdventOfCode](https://adventofcode.com/2022) and [#AdventOfCode](https://twitter.com/search?q=%23AdventOfCode&src=hashtag_click)

-   [30DayMapChallenge](https://30daymapchallenge.com/)

### Cheatsheets

**Cheatsheets** are very condensed summaries of a documentation regarding single R packages or focussing on a specific functionality. They can be compared with those sheets students might take with them when writting a test. A quite comprehensive collection of **cheatsheets** can be found at the Posit Website [here](https://posit.co/resources/cheatsheets/?type=posit-cheatsheets/). Some important and basic ones are

-   [Rstudio IDE](https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf)

-   [Git + GitHub](https://posit.co/wp-content/uploads/2022/10/git-github.pdf)

-   [Base R](https://posit.co/wp-content/uploads/2022/10/base-r.pdf)

-   [Data Wrangling](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)

-   [Plotting with \`ggplot\` package](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)

-   [Spatial data with \`sf\` package](https://posit.co/wp-content/uploads/2022/10/sf.pdf)

### Community

The R community is a very friendly and supportive community. Most important packages have great documentations for learning new R packages and frameworks. The R community has an extraordinary sense of sharing knowledge and experiences. Important platforms for getting engaged with the R community but also for getting help with questions, issues and bugs are

-   [Stackoverflow](https://stackoverflow.com/questions/tagged/r) for getting help with questions

-   [Posit community forum (formerly Rstudio)](https://community.rstudio.com/) for getting help with questions

-   [Twitter with #rstats](https://twitter.com/search?q=%23rstats&src=typed_query) for keeping track of latest developments, tips, tricks and getting in touch with the active R community members

-   [Mastodon](https://mastodon.social/) with #rstats, same same

-   [Github](https://github.com/) for getting help with bugs, getting to know the developers behind packages or simply hosting and versioning your own code

-   [R Ladies](https://www.rladies.org/) each one teach one meet-ups

### Websites

-   [The R Graph Gallery](https://r-graph-gallery.com/index.html) a sorted collection of charts made with R for inspiration

-   [Free Resources for Learning R](https://www.javedali.net/post/r-resources/) a comprehensive list of free online material

-   [Rdatasets](https://vincentarelbundock.github.io/Rdatasets/articles/data.html) an interactive list of datasets included in R packages
